(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{435:function(s,t,a){"use strict";a.r(t);var n=a(25),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[s._v("#")]),s._v(" 介绍")]),s._v(" "),a("p",[s._v("图中的元素称为"),a("strong",[s._v("顶点")]),s._v("（vertex），顶点间的联系称为"),a("strong",[s._v("边")]),s._v("（edge）。边有方向则称为"),a("strong",[s._v("有向图")]),s._v("，无方向称为"),a("strong",[s._v("无向图")]),s._v("，边具有权重的称为"),a("strong",[s._v("带权图")]),s._v("（weighted graph）。无向图中，顶点的"),a("strong",[s._v("度")]),s._v("（degree）等于与顶点相连的边数，有向图中则分为"),a("strong",[s._v("入度")]),s._v("（in-degree）和"),a("strong",[s._v("出度")]),s._v("（out-degree）")]),s._v(" "),a("h2",{attrs:{id:"图的存储方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图的存储方法"}},[s._v("#")]),s._v(" 图的存储方法")]),s._v(" "),a("h3",{attrs:{id:"邻接矩阵（adjacency-matrix）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邻接矩阵（adjacency-matrix）"}},[s._v("#")]),s._v(" 邻接矩阵（Adjacency Matrix）")]),s._v(" "),a("ul",[a("li",[s._v("优点：简单直接，能够高效获取顶点间关系，方便图的计算")]),s._v(" "),a("li",[s._v("缺点：容易浪费空间，比如对于无向图，矩阵沿对角线对称，实际只需存储一半；对于稀疏图，更是造成大量空间浪费")])]),s._v(" "),a("h3",{attrs:{id:"邻接表（adjacency-list）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邻接表（adjacency-list）"}},[s._v("#")]),s._v(" 邻接表（Adjacency List）")]),s._v(" "),a("ul",[a("li",[s._v("优点：节省存储空间，更适合存储稀疏图")]),s._v(" "),a("li",[s._v("缺点：使用时，较为耗时间，且对缓存不友好")])]),s._v(" "),a("p",[s._v("对于有向图，对应顶点的链表通常存储了其指向的顶点，这不利于查找指向该顶点的顶点集合，解决方法是再增加一个"),a("strong",[s._v("逆邻接表")])]),s._v(" "),a("p",[s._v("由于使用了链表，因此与散列表的"),a("strong",[s._v("优化")]),s._v("方法相同，当链表过长时，可以转化为更高效的数据结构，如跳表、平衡二叉树等，加快查找效率")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Graph")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 无向图")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 顶点的个数")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" adj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 邻接表")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Graph")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("v "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    adj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      adj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addEdge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 无向图一条边存两次")]),s._v("\n    adj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    adj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h2",{attrs:{id:"图的搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图的搜索"}},[s._v("#")]),s._v(" 图的搜索")]),s._v(" "),a("h3",{attrs:{id:"广度优先搜索（breadth-first-search）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#广度优先搜索（breadth-first-search）"}},[s._v("#")]),s._v(" 广度优先搜索（Breadth-First-Search）")]),s._v(" "),a("p",[s._v("主要思想：先查找离起始顶点最近的，接着查找次近的，逐层向外搜索")]),s._v(" "),a("p",[s._v("BFS 的通常需要借助 "),a("strong",[s._v("queue")]),s._v(" 和 "),a("strong",[s._v("visited")]),s._v(" 数组来实现逐层搜索，借助 "),a("strong",[s._v("prev")]),s._v(" 数组来存储搜索的路径")]),s._v(" "),a("p",[s._v("复杂度：")]),s._v(" "),a("ul",[a("li",[s._v("时间："),a("code",[s._v("O(E)")]),s._v("，每个顶点进出一次队列，每条边被访问一次，E 通常大于等于 V-1，可以简写为 "),a("code",[s._v("O(E)")])]),s._v(" "),a("li",[s._v("空间："),a("code",[s._v("O(V)")]),s._v("，几个辅助结构的大小都不会超过顶点的个数")])]),s._v(" "),a("h3",{attrs:{id:"深度优先搜索（depth-first-search）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索（depth-first-search）"}},[s._v("#")]),s._v(" 深度优先搜索（Depth-First-Search）")]),s._v(" "),a("p",[s._v("主要思想：本质是"),a("strong",[s._v("回溯")]),s._v("的思想，选择一条搜索路径直到终点，如果未找到，则返回上一个分支点继续搜索")]),s._v(" "),a("p",[s._v("DFS 同样需要 "),a("strong",[s._v("visited")]),s._v(" 和 "),a("strong",[s._v("prev")]),s._v(" 数组的帮助，通常 DFS 天然适合使用递归来实现，但是当数据量较大，存在递归栈溢出风险时，可以使用 "),a("strong",[s._v("stack")]),s._v(" 完成迭代实现")]),s._v(" "),a("p",[s._v("复杂度：")]),s._v(" "),a("ul",[a("li",[s._v("时间："),a("code",[s._v("O(E)")]),s._v("，每条边最多被访问两次，一次遍历，一次退回")]),s._v(" "),a("li",[s._v("空间："),a("code",[s._v("O(V)")]),s._v("，递归调用栈和辅助结构大小都不会超过顶点个数")])])])}),[],!1,null,null,null);t.default=e.exports}}]);