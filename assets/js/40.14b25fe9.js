(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{434:function(t,s,a){"use strict";a.r(s);var n=a(25),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("p",[t._v("堆是一种特殊的树，满足如下两个条件")]),t._v(" "),a("ul",[a("li",[t._v("堆是一个完全二叉树")]),t._v(" "),a("li",[t._v("堆中的每个节点值都大于等于（小于等于）其子树中每个节点的值")])]),t._v(" "),a("h2",{attrs:{id:"堆的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆的实现"}},[t._v("#")]),t._v(" 堆的实现")]),t._v(" "),a("p",[t._v("完全二叉树天然适合使用数组来存储，节省空间，不需要左右节点的指针")]),t._v(" "),a("ul",[a("li",[t._v("左节点："),a("code",[t._v("2i")])]),t._v(" "),a("li",[t._v("右节点："),a("code",[t._v("2i+1")])]),t._v(" "),a("li",[t._v("父节点："),a("code",[t._v("i/2")])])]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("0. 堆化操作")]),a("br"),t._v("\n堆化（Heapify）即使堆重新符合堆特性的操作，分为自底向上和自顶向下两种")]),t._v(" "),a("ul",[a("li",[t._v("自底向上：从当前节点向上，依次进行比较和交换，直到满足堆特性")]),t._v(" "),a("li",[t._v("自顶向下：从当前节点向下，依次进行比较和交换，直到满足堆特性")])]),t._v(" "),a("p",[a("strong",[t._v("1. 插入新元素")]),a("br"),t._v("\n直接将新元素直接插入堆的末尾，从该元素开始执行"),a("strong",[t._v("自底向上")]),t._v("的堆化操作")]),t._v(" "),a("p",[a("strong",[t._v("2. 删除（堆顶）元素")]),a("br"),t._v("\n删除堆顶元素后，将堆的末尾元素放到堆顶，从该元素开始执行"),a("strong",[t._v("自顶向下")]),t._v("的堆化操作")]),t._v(" "),a("p",[t._v("对于一个包含 "),a("code",[t._v("n")]),t._v(" 个节点的完全二叉树，树的高度不会超过 "),a("code",[t._v("logn")]),t._v("，因此堆化的时间复杂度为 "),a("code",[t._v("O(logn)")]),t._v("，插入和删除的主要操作就是堆化，因此时间复杂度也为 "),a("code",[t._v("O(logn)")])]),t._v(" "),a("h2",{attrs:{id:"堆排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆排序"}},[t._v("#")]),t._v(" 堆排序")]),t._v(" "),a("p",[t._v("堆排序是一种 "),a("code",[t._v("O(nlogn)")]),t._v(" 的"),a("strong",[t._v("原地排序")]),t._v("算法，主要分为两个步骤：建堆和排序")]),t._v(" "),a("h3",{attrs:{id:"_1-建堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-建堆"}},[t._v("#")]),t._v(" 1. 建堆")]),t._v(" "),a("p",[t._v("这里假设要对数据从到大进行排序，则建立一个最大堆")]),t._v(" "),a("p",[a("strong",[t._v("方法 1")]),t._v("：从前向后处理数据"),a("br"),t._v("\n将数组按顺序插入堆中，最初假设数组中只包含一个元素，即下标为 1 的元素，接着按顺序插入下标 2 到 n 的数据即可")]),t._v(" "),a("p",[a("strong",[t._v("方法 2")]),t._v("：从后向前处理数据"),a("br"),t._v("\n由于叶子节点均是符合要求的，因此从后向前找到"),a("strong",[t._v("第一个非叶子节点")]),t._v("，从该节点开始到根节点，每个节点依次执行"),a("strong",[t._v("自顶向下")]),t._v("的堆化操作即可")]),t._v(" "),a("p",[t._v("方法 2 对下标由 [n/2...1] 的节点进行了自顶向下的堆化，由此可以粗略估算时间复杂度为 "),a("code",[t._v("O(nlogn)")]),t._v("。实际上，如果进行更精确的计算，可以发现建堆的时间复杂度是 "),a("code",[t._v("O(n)")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// n/2 是第一个非叶子节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("buildHeap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("heapify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("heapify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" maxPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("maxPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" maxPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" maxPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("h3",{attrs:{id:"_2-排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-排序"}},[t._v("#")]),t._v(" 2. 排序")]),t._v(" "),a("p",[t._v("完成建堆操作后，此时数组已经是一个最大堆了，排序只需不断进行以下两个步骤即可得到有序数组")]),t._v(" "),a("ul",[a("li",[t._v("删除堆顶元素，将堆顶元素放至数组末尾（本质：堆顶元素与末尾元素进行交换）")]),t._v(" "),a("li",[t._v("对堆顶元素执行 Heapify 操作")])]),t._v(" "),a("h3",{attrs:{id:"复杂度与稳定性分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂度与稳定性分析"}},[t._v("#")]),t._v(" 复杂度与稳定性分析")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("稳定性：不稳定，排序过程中，交换可能会导致元素顺序改变")])]),t._v(" "),a("li",[a("p",[t._v("内存消耗："),a("code",[t._v("O(1)")]),t._v("，是原地排序算法")])]),t._v(" "),a("li",[a("p",[t._v("执行效率："),a("code",[t._v("O(nlogn)")]),t._v("，建堆操作复杂度 "),a("code",[t._v("O(n)")]),t._v("，排序操作复杂度 "),a("code",[t._v("O(nlogn)")])])])]),t._v(" "),a("h2",{attrs:{id:"堆的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆的应用"}},[t._v("#")]),t._v(" 堆的应用")]),t._v(" "),a("h3",{attrs:{id:"优先级队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优先级队列"}},[t._v("#")]),t._v(" 优先级队列")]),t._v(" "),a("p",[a("strong",[t._v("1. 合并有序小文件")]),a("br"),t._v("\n100 个小文件，每个文件 100 MB，每个文件中存储有序字符串，希望合并成一个有序大文件")]),t._v(" "),a("ul",[a("li",[t._v("从 100 个文件中，各取第 1 个字符串，放入最小堆中")]),t._v(" "),a("li",[t._v("取出堆顶元素放入大文件中")]),t._v(" "),a("li",[t._v("接着从堆顶元素来源的文件取下一个字符串加入最小堆中，重复以上步骤")])]),t._v(" "),a("p",[t._v("相比使用数组对 100 条字符串排序取最小，复杂度为 O(n)，使用优先队列复杂度只有 O(logn)")]),t._v(" "),a("p",[a("strong",[t._v("2. 高性能定时器")]),t._v("\n设计一个定时器，维护多个定时任务，到达特定触发时间则执行该任务")]),t._v(" "),a("p",[t._v("传统方案：定时器每隔 1 秒就扫描任务列表，检查是否与任务到达触发时间")]),t._v(" "),a("p",[t._v("改进方案：根据任务触发时间，将这些任务存储在优先队列中，定时器只需根据队首任务的执行时间，与当前时间比较，设置一个时间间隔，到达该时间间隔，则取出第一个任务执行，无需每秒轮询任务列表")]),t._v(" "),a("h3",{attrs:{id:"top-k"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#top-k"}},[t._v("#")]),t._v(" Top K")]),t._v(" "),a("p",[a("strong",[t._v("1. 静态数据集合")]),a("br"),t._v("\n维护一个大小为 K 的"),a("strong",[t._v("最小堆")]),t._v("，遍历数组，将数组元素与堆顶元素比较（堆未满时，直接插入堆中）")]),t._v(" "),a("ul",[a("li",[t._v("如果比堆顶元素大，则把堆顶元素删除，将该元素插入堆中")]),t._v(" "),a("li",[t._v("如果比堆顶元素小，则不做处理，继续遍历数组")])]),t._v(" "),a("p",[t._v("遍历数组需要 "),a("code",[t._v("O(n)")]),t._v("，堆化操作需要 "),a("code",[t._v("O(logk)")]),t._v("，则最坏时间复杂度为 "),a("code",[t._v("O(nlogk)")])]),t._v(" "),a("p",[a("strong",[t._v("2. 动态数据集合")]),a("br"),t._v("\n与静态操作没有区别，每次有新元素插入，都与堆顶元素比较，执行相应操作即可")]),t._v(" "),a("h3",{attrs:{id:"求中位数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#求中位数"}},[t._v("#")]),t._v(" 求中位数")]),t._v(" "),a("p",[t._v("用于求中位数的思想，同样适用于求其他如 25%，75% 分位数")]),t._v(" "),a("p",[a("strong",[t._v("1. 静态数据集合")]),a("br"),t._v("\n求中位数可以直接利用排序或者借助 Kth Largest 算法")]),t._v(" "),a("p",[a("strong",[t._v("2. 动态数据集合")]),a("br"),t._v("\n维护一个最大堆，一个最小堆，如果将数组从小到达排序，则")]),t._v(" "),a("ul",[a("li",[t._v("最大堆：存储数组前半部分数据，如果是奇数，存储前 "),a("code",[t._v("n/2+1")]),t._v(" 个数据")]),t._v(" "),a("li",[t._v("最小堆：维护数组后半部分数据")])]),t._v(" "),a("p",[t._v("由此，最小堆的堆顶元素"),a("strong",[t._v("大于")]),t._v("最大堆的所有元素，最大堆的堆顶元素就是"),a("strong",[t._v("当前中位数")])]),t._v(" "),a("p",[t._v("当有新数据需要处理时")]),t._v(" "),a("ul",[a("li",[t._v("新元素小于等于最大堆堆顶元素，插入最大堆")]),t._v(" "),a("li",[t._v("否则，插入最小堆")])]),t._v(" "),a("p",[t._v("新元素插入完成后，可能需要调整堆元素数量，通过将一个堆的堆顶元素移动到另一个堆来维护约定")])])}),[],!1,null,null,null);s.default=r.exports}}]);