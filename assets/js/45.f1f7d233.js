(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{449:function(v,_,t){"use strict";t.r(_);var l=t(25),s=Object(l.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[v._v("#")]),v._v(" 分类")]),v._v(" "),t("p",[v._v("支持动态数据高效操作：跳表、散列表、红黑树、字典树")]),v._v(" "),t("p",[v._v("以空间换时间：")]),v._v(" "),t("p",[v._v("搜索算法：回溯算法")]),v._v(" "),t("h2",{attrs:{id:"数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[v._v("#")]),v._v(" 数据结构")]),v._v(" "),t("p",[t("strong",[v._v("1. 数组")])]),v._v(" "),t("ul",[t("li",[v._v("数组批量集中删除有利于减少删除操作导致的数据搬迁，也是 JVM 标记清除垃圾回收算法的核心思想")])]),v._v(" "),t("p",[t("strong",[v._v("2. 链表")])]),v._v(" "),t("ul",[t("li",[v._v("通过链表和散列表，可以实现 LRU 缓存淘汰策略")])]),v._v(" "),t("p",[t("strong",[v._v("3. 栈")])]),v._v(" "),t("ul",[t("li",[v._v("浏览器的前进后退：使用两个栈即可实现")])]),v._v(" "),t("p",[t("strong",[v._v("4. 队列")])]),v._v(" "),t("ul",[t("li",[v._v("线程池处理请求：利用栈进行排队调度")])]),v._v(" "),t("p",[t("strong",[v._v("5. 跳表")])]),v._v(" "),t("ul",[t("li",[v._v("Redis 有序集合的实现使用到了跳表")])]),v._v(" "),t("p",[t("strong",[v._v("6. 散列表")])]),v._v(" "),t("ul",[t("li",[v._v("Word 中的单词拼写检查功能：使用散列表存储整个英文字典，用户输入时，在散列表中查找该单词，如未查找则视为非法单词")])]),v._v(" "),t("p",[t("strong",[v._v("7. 堆")])]),v._v(" "),t("ul",[t("li",[v._v("优先级队列：合并 100 个有序小文件，高性能定时器")]),v._v(" "),t("li",[v._v("Top K")]),v._v(" "),t("li",[v._v("求中位数")])]),v._v(" "),t("p",[t("strong",[v._v("8. 图")])]),v._v(" "),t("ul",[t("li",[v._v("存储微博（有向图）、微信（无向图）的好友关系")])]),v._v(" "),t("p",[t("strong",[v._v("9. 字典树")])]),v._v(" "),t("ul",[t("li",[v._v("搜索引擎搜索关键词提示")]),v._v(" "),t("li",[v._v("IDE 中的代码自动补全")])]),v._v(" "),t("h2",{attrs:{id:"算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[v._v("#")]),v._v(" 算法")]),v._v(" "),t("p",[t("strong",[v._v("1. 二分查找")])]),v._v(" "),t("ul",[t("li",[v._v("1000 万个数据，每个数据 8 字节，快速判断某个数据是否出现在这 1000 万 数据中，要求内存不超过 100 MB")]),v._v(" "),t("li",[v._v("给定 IP 范围与归属对应表，如何快速定位 IP 地址归属：将对应表按起始 IP 排序，查找最后一个起始 IP 小于等于目标 IP 的区间")])]),v._v(" "),t("p",[t("strong",[v._v("2. 哈希算法")])]),v._v(" "),t("ul",[t("li",[v._v("快速判断图片是否在图库中，海量图库（如 1 亿）")]),v._v(" "),t("li",[v._v("会话粘滞（Session Sticky）的负载均衡算法，即同一个客户端上，一次会话上的所有请求路由到同一个服务器上")]),v._v(" "),t("li",[v._v("统计关键词被搜索次数，1 T 的日志文件")]),v._v(" "),t("li",[v._v("分布式系统结点部署频繁变化 -> 一致性哈希算法")])]),v._v(" "),t("p",[t("strong",[v._v("3. 分治算法")])]),v._v(" "),t("ul",[t("li",[v._v("海量数据处理，如 MapReduce 的本质思想")])]),v._v(" "),t("p",[t("strong",[v._v("贪心算法")])]),v._v(" "),t("ul",[t("li",[v._v("区间覆盖问题")]),v._v(" "),t("li",[v._v("霍夫曼编码")]),v._v(" "),t("li",[v._v("Prim 和 Kruskal 最小生成树算法")]),v._v(" "),t("li",[v._v("Dijkstra 单源最短路径算法")])]),v._v(" "),t("h2",{attrs:{id:"综合类问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#综合类问题"}},[v._v("#")]),v._v(" 综合类问题")]),v._v(" "),t("p",[t("strong",[v._v("1. 10 亿个搜索关键词的日志文件，如何快速获取 Top 10 的搜索关键词")])]),v._v(" "),t("ul",[t("li",[v._v("哈希算法 + 散列表 + 堆")])])])}),[],!1,null,null,null);_.default=s.exports}}]);