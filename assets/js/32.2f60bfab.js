(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{435:function(t,s,a){"use strict";a.r(s);var v=a(25),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"算法步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法步骤"}},[t._v("#")]),t._v(" 算法步骤")]),t._v(" "),a("ol",[a("li",[t._v("可能适用的问题：针对一组数据，给定限制值和期望值，希望从中选出一组数据，在满足限制的条件下，期望值最大")]),t._v(" "),a("li",[t._v("尝试能否解决问题：每次做出当前选择时，在对限制值同等贡献量下，对期望值贡献最大的数据（或者贡献相同期望值，限制值贡献最少的）")]),t._v(" "),a("li",[t._v("通过例子或者严谨的数学推理，证明由此产生的解是最优解")])]),t._v(" "),a("p",[t._v("贪心算法不一定能得到最优解：比如用贪心算法，求解图中两点的最短路径，其主要原因在于，"),a("strong",[t._v("前面的选择，会影响后面的选择")])]),t._v(" "),a("h2",{attrs:{id:"典型问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#典型问题"}},[t._v("#")]),t._v(" 典型问题")]),t._v(" "),a("ol",[a("li",[t._v("钱币找零：拥有不同数量的不同面额纸币，给定一个金额，如何使用尽可能少的纸币支付该金额")]),t._v(" "),a("li",[t._v("区间覆盖：给定一组区间的起始点和结束点，从中选出尽可能多的不相交区间")]),t._v(" "),a("li",[t._v("霍夫曼（Huffman）编码：统计文本中出现字符的种类和频率，频率越高的，使用越短的编码")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("找零问题不一定可以使用贪婪算法：考虑币值为 100，99 和 1，每种各一百张，找 396 元。")]),t._v(" "),a("p",[t._v("动态规划可求出四张 99 元，但贪心算法解出需三张一百和 96 张一元")])])])}),[],!1,null,null,null);s.default=_.exports}}]);