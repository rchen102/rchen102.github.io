(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{215:function(_,t,v){"use strict";v.r(t);var a=v(0),r=Object(a.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"数组的特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数组的特性"}},[_._v("#")]),_._v(" 数组的特性")]),_._v(" "),v("h3",{attrs:{id:"_1-线性表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-线性表"}},[_._v("#")]),_._v(" 1. 线性表")]),_._v(" "),v("ul",[v("li",[_._v("数据之间是简单的前后关系")]),_._v(" "),v("li",[_._v("数组，链表，队列，栈")])]),_._v(" "),v("h3",{attrs:{id:"_2-随机访问"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-随机访问"}},[_._v("#")]),_._v(" 2. 随机访问")]),_._v(" "),v("ul",[v("li",[_._v("连续的内存空间")]),_._v(" "),v("li",[_._v("相同的数据类型")]),_._v(" "),v("li",[_._v("->随机访问")])]),_._v(" "),v("h3",{attrs:{id:"_3-低效的插入和删除"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-低效的插入和删除"}},[_._v("#")]),_._v(" 3. 低效的插入和删除")]),_._v(" "),v("p",[_._v("插入和删除的时间复杂度")]),_._v(" "),v("ul",[v("li",[_._v("最好: "),v("code",[_._v("O(1)")])]),_._v(" "),v("li",[_._v("最坏: "),v("code",[_._v("O(n)")])]),_._v(" "),v("li",[_._v("平均: "),v("code",[_._v("O((1+2+...+n)/n) = O(n)")])])]),_._v(" "),v("p",[_._v("提高删除操作效率: 多次删除操作集中一起执行(JVM标记清除垃圾回收算法核心思想)")]),_._v(" "),v("h2",{attrs:{id:"容器与数组"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#容器与数组"}},[_._v("#")]),_._v(" 容器与数组")]),_._v(" "),v("p",[_._v("大多数编程语言都提供容器类，如ArrayList, vector"),v("br"),_._v("\n相比数组，这些容器类封装了数组的操作细节，提供数组的动态扩容")]),_._v(" "),v("p",[v("strong",[_._v("什么时候数组比容器类更适合")])]),_._v(" "),v("ul",[v("li",[_._v("对于Java，ArrayList无法存储基本数据类型，需要借助自动装箱开箱，会有一定性能损耗")]),_._v(" "),v("li",[_._v("数据大小已知，数组操作简单")])]),_._v(" "),v("p",[_._v("大多数情况，如果不是需要将性能优化做到极限，可以直接使用容器类")])])}),[],!1,null,null,null);t.default=r.exports}}]);