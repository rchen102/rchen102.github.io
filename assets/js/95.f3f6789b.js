(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{379:function(s,a,t){"use strict";t.r(a);var n=t(25),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("ul",[t("li",[s._v("HashMap：基于"),t("strong",[s._v("数组")]),s._v("，"),t("strong",[s._v("单链表")]),s._v("，"),t("strong",[s._v("红黑树")]),s._v("，无序，线程不安全")]),s._v(" "),t("li",[s._v("Hashtable：基于"),t("strong",[s._v("数组")]),s._v("，"),t("strong",[s._v("单链表")]),s._v("，无序，线程安全")]),s._v(" "),t("li",[s._v("LinkedHashMap：基于 "),t("strong",[s._v("HashMap")]),s._v("，"),t("strong",[s._v("双向链表")]),s._v("，按插入顺序或访问顺序，线程不安全")]),s._v(" "),t("li",[s._v("TreeMap：基于"),t("strong",[s._v("红黑树")]),s._v("，按照 key 从小到大排序，线程不安全")]),s._v(" "),t("li",[s._v("ConcurrentHashMap")])]),s._v(" "),t("details",[t("summary",[s._v("定义")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// since JDK 1.2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AbstractMap")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cloneable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Serializable")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// since JDK 1.0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hashtable")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Dictionary")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cloneable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Serializable")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// since JDK 1.4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedHashMap")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])])]),s._v(" "),t("h2",{attrs:{id:"hashmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[s._v("#")]),s._v(" HashMap")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("基于数组，单链表，红黑树实现，数组的一个位置称为桶"),t("br"),s._v("\n(1) 基本结点 Node<K,V> 实现了 Map.Entry<K,V> 接口"),t("br"),s._v("\n(2) 结点存储了 hash，key，value，next")])]),s._v(" "),t("li",[t("p",[s._v("默认初始容量 "),t("code",[s._v("16")]),s._v("，装载因子 "),t("code",[s._v("0.75")]),s._v("，容量总是保持 "),t("code",[s._v("2^n")]),s._v("（方便按位与操作取模）"),t("br"),s._v("\n(1) 如传入容量参数 k，默认向上拓展至 k 最近的 "),t("code",[s._v("2^n")]),s._v(" 作为容量"),t("br"),s._v("\n(2) 懒加载：HashMap 被首次使用时，才进行初始化开辟空间")])]),s._v(" "),t("li",[t("p",[s._v("key 比较：先通过 hashCode() 找到对应的桶，如相同再比较 equals()"),t("br"),s._v("\n(1) 因此自定义类要注意同时重写两个方法"),t("br"),s._v("\n(2) key 和 value 都可以为 "),t("code",[s._v("null")])])]),s._v(" "),t("li",[t("p",[s._v("查找，修改等操作的平均时间复杂度为 "),t("code",[s._v("O(1)")]),t("br"),s._v("\n(1) 数组查询效率 "),t("code",[s._v("O(1)")]),s._v("，链表查询效率 "),t("code",[s._v("O(k)")]),s._v("，红黑树查询效率 "),t("code",[s._v("O(logk)")]),s._v("，k 为桶中元素个数")])]),s._v(" "),t("li",[t("p",[s._v("插入操作 put()：通过 hash(key) 方法得到 hash 值，再由 hash 值计算索引"),t("br"),s._v("\n(1) 哈希值：由 key 的 hashCode 计算，高 16 位不变，低 16 位与高 16 位做一次异或运算，这样通过按位与取模时，高 16 位也能参与散列"),t("br"),s._v("\n(2) 索引：采用高效的按位与操作，index = (n - 1) & hash()，n 是容量")])]),s._v(" "),t("li",[t("p",[s._v("扩容操作 resize()：每次扩容为原来 "),t("code",[s._v("2 倍")]),t("br"),s._v("\n(1) 由取模算法可知，扩容后元素的桶位置只有两种可能：原位置 or 原位置 + oldCap"),t("br"),s._v("\n(2) 此时会对桶中的链表或红黑树进行拆分，分成以上两类")])]),s._v(" "),t("li",[t("p",[s._v("树化操作 treeifyBin()：发生在插入新元素时，当单个桶中元素数量 "),t("code",[s._v(">= 8")]),s._v(" 时发生"),t("br"),s._v("\n(1) 若此时，桶的数量 "),t("code",[s._v("< 64")]),s._v(" ，扩容代替树化操作"),t("br"),s._v("\n(2) 若此时，桶的数量 "),t("code",[s._v(">= 64")]),s._v("，树化操作进行"),t("br"),s._v("\n(3) 链表过长时，查找效率低下，可以利用红黑树快速增删改查的特点提高性能"),t("br"),s._v("\n(4) 但是当红黑树中结点太少时，红黑树要维持平衡，比起链表，性能优势并不明显"),t("br"),s._v("\n(5) 因此当桶数量 "),t("code",[s._v("< 64")]),s._v("，即容量较小时，哈希碰撞的几率会比较大，此时应优先扩容")])]),s._v(" "),t("li",[t("p",[s._v("反树化操作 untreeify()：发生在删除 remove() 和扩容 resize() 中"),t("br"),s._v("\n(1) 当 resize() 拆分红黑树时，拆分后，若发现单个桶中元素数量 "),t("code",[s._v("<= 6")]),s._v("，进行反树化"),t("br"),s._v("\n(2) 当 remove() 是从红黑树中删除结点时，如果发现根或左右结点其一为空，说明结点过少 "),t("code",[s._v("<= 2")]),s._v("，转为链表")])])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 默认初始容量 16，装载因子 0.75")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" initialCapacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   \n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" initialCapacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" loadFactor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"hashtable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashtable"}},[s._v("#")]),s._v(" Hashtable")]),s._v(" "),t("p",[s._v("Hashtable 是 JDK 1.0 时期的产物，对比 HashMap")]),s._v(" "),t("ol",[t("li",[s._v("继承结构不同，Hashtable 继承 Dictionary，HashMap 继承 AbstractMap")]),s._v(" "),t("li",[s._v("Hashtable 不支持 "),t("code",[s._v("null")]),s._v(" 作为 key 和 value")]),s._v(" "),t("li",[s._v("Hashtable 默认大小是 "),t("code",[s._v("11")]),s._v("，扩大逻辑是 "),t("code",[s._v("*2+1")]),s._v("，对于给定大小不会做扩展")]),s._v(" "),t("li",[s._v("Hashtable 索引计算采用除法取余数，更低效")]),s._v(" "),t("li",[s._v("Hashtable 使用链表法作为哈希冲突的解决，没有红黑树优化")]),s._v(" "),t("li",[s._v("Hashtable 是线程安全的")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hashtable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 11, 0.75")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hashtable")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" initialCapacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hashtable")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" initialCapacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" loadFactor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   \n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hashtable")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"linkedhashmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashmap"}},[s._v("#")]),s._v(" LinkedHashMap")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("继承自 HashMap，基于 HashMap 和 双向链表实现"),t("br"),s._v("\n(1) 基本结点 Entry<K,V> 继承了 HashMap.Node<K,V>，扩展了新字段 before，after"),t("br"),s._v("\n(2) 这也是 LinkedHashMap 设计巧妙的地方，没有额外创建新结点构建链表"),t("br"),s._v("\n(3) 无论结点对象在 HashMap 内部是处于链表还是红黑树结构，都不影响双向链表的结构")])]),s._v(" "),t("li",[t("p",[s._v("默认支持按元素插入顺序访问，也能以设置为按访问顺序访问（accessOrder 设为 true）"),t("br"),s._v("\n(1) 新插入的元素或最近被访问的元素，都将插入双向链表末尾")])]),s._v(" "),t("li",[t("p",[s._v("查找，修改等操作的平均时间复杂度为 "),t("code",[s._v("O(1)")]),t("br"),s._v("\n(1) 因为还需要维护双向链表，因此效率比 HashMap 要低")])]),s._v(" "),t("li",[t("p",[s._v("设计巧妙，很多方法都是在 HashMap 中留的钩子（Hook），实现这些 Hook 就可以实现对应功能了"),t("br"),s._v("\n(1) afterNodeInsertion：put 结尾处触发，用于移除最老的元素（如果需要）"),t("br"),s._v("\n(2) afterNodeAccess：元素被访问时调用，用于移动元素至双向链表末尾（如果需要）"),t("br"),s._v("\n(3) afterNodeRemoval：remove 调用时触发，从双向链表中删除对应结点"),t("br"),s._v("\n(4) newNode：插入新元素时触发，用于创建结点，创建 Entry<K,V> 替换原先的 Node<K,V>")])]),s._v(" "),t("li",[t("p",[s._v("默认不会插入元素时，不会移除旧元素，如果有需要，重写方法 boolean removeEldestEntry()\n(1) afterNodeInsertion 中会根据该方法判断，是否需要移除旧元素，默认返回 false\n(2) 可以利用继承 LinkedHashMap，重写该方法实现 LRU")])])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedHashMap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 16, 0.75")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedHashMap")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" initialCapacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedHashMap")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" initialCapacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" loadFactor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   \n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedHashMap")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" initialCapacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" loadFactor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" accessOrder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedHashMap")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h2",{attrs:{id:"treemap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#treemap"}},[s._v("#")]),s._v(" TreeMap")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("实现接口比较特殊 NavigableMap -> SortedMap -> Map，拓展了许多 Map 没有的方法")])]),s._v(" "),t("li",[t("p",[s._v("底层结构只基于一颗红黑树，按 key 从小到大进行排序"),t("br"),s._v("\n(1) 一种方式是 key 实现 "),t("code",[s._v("Comparable<T>")]),s._v(" 接口"),t("br"),s._v("\n(2) 另一种方式是，通过构造方法传入比较器 "),t("code",[s._v("Comparator<? super K>")]),t("br"),s._v("\n(3) key 不能为 "),t("code",[s._v("null")])])]),s._v(" "),t("li",[t("p",[s._v("查找，修改等操作平均复杂度都为 "),t("code",[s._v("O(logn)")]),s._v("，因为只用到了红黑树")])]),s._v(" "),t("li",[t("p",[s._v("TreeMap 内部遍历的实现没有采用递归，实现比较有意思"),t("br"),s._v("\n(1) "),t("code",[s._v("for (Entry<K, V> e = getFirstEntry(); e != null; e = successor(e))")])])])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeMap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   \n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeMap")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comparator")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" comparator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  \n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeMap")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   \n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeMap")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SortedMap")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("​"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("hr"),s._v(" "),t("p",[t("strong",[s._v("参考链接")])]),s._v(" "),t("p",[s._v("[1] "),t("a",{attrs:{href:"https://www.cnblogs.com/tong-yuan/p/10638912.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("彤哥读源码 | HashMap"),t("OutboundLink")],1),t("br"),s._v("\n[2] "),t("a",{attrs:{href:"https://www.cnblogs.com/tong-yuan/p/10639263.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("彤哥读源码 | LinkedHashMap"),t("OutboundLink")],1),t("br"),s._v("\n[3] "),t("a",{attrs:{href:"https://www.cnblogs.com/tong-yuan/p/10651637.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("彤哥读源码 | TreeMap"),t("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);