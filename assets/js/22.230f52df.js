(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{227:function(t,r,a){"use strict";a.r(r);var s=a(0),v=Object(s.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("p",[t._v("递归本质上是将问题分解为两部分，一部分属于「递」，一部分属于「归」")]),t._v(" "),a("ul",[a("li",[t._v("「递」的过程是将问题分解为「子问题」求解的过程")]),t._v(" "),a("li",[t._v("「归」则指「子问题」求解完成返回")])]),t._v(" "),a("h2",{attrs:{id:"递归的两大要素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归的两大要素"}},[t._v("#")]),t._v(" 递归的两大要素")]),t._v(" "),a("ul",[a("li",[t._v("一个问题可以分解为若干子问题求解，且子问题除了数据规模不同，解法完全相同")]),t._v(" "),a("li",[t._v("存在递归终止条件，即递归的「出口」")])]),t._v(" "),a("h2",{attrs:{id:"递归的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归的问题"}},[t._v("#")]),t._v(" 递归的问题")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("堆栈溢出")]),t._v("：当递归求解的问题数据规模太大，函数调用层次很深，可能会有堆栈溢出的风险"),a("br"),t._v("\n解决：在代码中限制递归调用的深度，超过一定深度，终止计算")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("重复计算")]),t._v("：同一个子问题可能会被计算多次，浪费时间和空间"),a("br"),t._v("\n解决：使用带「备忘录」的递归求解，即记录子问题的结果，一旦出现相同子问题，直接查找返回结果")])])])])}),[],!1,null,null,null);r.default=v.exports}}]);