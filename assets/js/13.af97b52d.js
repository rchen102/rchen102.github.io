(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{213:function(a,t,r){"use strict";r.r(t);var v=r(0),e=Object(v.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"java抽象类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java抽象类"}},[a._v("#")]),a._v(" Java抽象类")]),a._v(" "),r("p",[a._v("面向对象概念中，对象都是通过类来描述，但并不是所有类都是用来描绘对象的")]),a._v(" "),r("p",[a._v("包含抽象方法的普通类->抽象类")]),a._v(" "),r("p",[a._v("对子类有所要求: 可以强制子类对某些方法进行实现(覆写)")]),a._v(" "),r("h3",{attrs:{id:"特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[a._v("#")]),a._v(" 特性")]),a._v(" "),r("ul",[r("li",[a._v("抽象类不能被实例化对象，必须被继承才能使用")]),a._v(" "),r("li",[a._v("抽象类的子类需要实现所有的抽象方法，否则也是抽象类")]),a._v(" "),r("li",[a._v("构造方法，类方法(静态方法)不能声明为抽象方法")])]),a._v(" "),r("h3",{attrs:{id:"注意"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[a._v("#")]),a._v(" 注意")]),a._v(" "),r("ul",[r("li",[a._v("抽象类允许不包含抽象方法，但依然不能被实例化")]),a._v(" "),r("li",[a._v("子类对抽象方法的实现也算覆写 ("),r("code",[a._v("@Override")]),a._v("不会报错)")]),a._v(" "),r("li",[a._v("日常开发通常不会继承普通类，只继承抽象类")])]),a._v(" "),r("h2",{attrs:{id:"java接口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java接口"}},[a._v("#")]),a._v(" Java接口")]),a._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),r("p",[a._v("[1] "),r("a",{attrs:{href:"https://www.runoob.com/java/java-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java菜鸟教程"),r("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);