(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{227:function(s,a,t){"use strict";t.r(a);var n=t(0),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"java抽象类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java抽象类"}},[s._v("#")]),s._v(" Java抽象类")]),s._v(" "),t("ul",[t("li",[s._v("面向对象概念中，对象都是通过类来描述，但并不是所有类都是用来描绘对象的")]),s._v(" "),t("li",[s._v("除了不能实例化对象外，抽象类与普通类并没有区别")]),s._v(" "),t("li",[s._v("抽象类对子类有所要求: 可以强制子类对某些方法进行实现(覆写)")])]),s._v(" "),t("h3",{attrs:{id:"抽象类特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#抽象类特性"}},[s._v("#")]),s._v(" 抽象类特性")]),s._v(" "),t("ul",[t("li",[s._v("抽象类不能被实例化对象，必须被继承才能使用")]),s._v(" "),t("li",[s._v("抽象类的子类需要实现所有的抽象方法，否则也是抽象类")]),s._v(" "),t("li",[t("strong",[s._v("构造方法")]),s._v("，"),t("strong",[s._v("类方法")]),s._v("(静态方法)不能声明为抽象方法")]),s._v(" "),t("li",[s._v("一个类只能继承一个抽象类")])]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),t("ul",[t("li",[s._v("抽象类允许"),t("strong",[s._v("不包含抽象方法")]),s._v("，但依然不能被实例化")]),s._v(" "),t("li",[s._v("子类对抽象方法的实现属于"),t("strong",[s._v("重写")]),s._v(" ("),t("code",[s._v("@Override")]),s._v(")")]),s._v(" "),t("li",[s._v("日常开发通常不会继承普通类，只继承抽象类")])])]),s._v(" "),t("h2",{attrs:{id:"java接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java接口"}},[s._v("#")]),s._v(" Java接口")]),s._v(" "),t("ul",[t("li",[s._v("接口并不是类，类描述对象属性和方法，接口则是类要实现的抽象方法的集合")]),s._v(" "),t("li",[s._v("抽象类虽然可以要求子类实现某些抽象方法，但是一个子类只能继承"),t("strong",[s._v("一个")]),s._v("抽象类，却可以实现"),t("strong",[s._v("多个")]),s._v("接口")]),s._v(" "),t("li",[s._v("通常接口只包含"),t("strong",[s._v("全局常量")]),s._v("和"),t("strong",[s._v("抽象方法")]),s._v("，但是从"),t("code",[s._v("JDK1.8")]),s._v("开始，接口可以定义更多的内容")])]),s._v(" "),t("h3",{attrs:{id:"接口特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口特性"}},[s._v("#")]),s._v(" 接口特性")]),s._v(" "),t("ul",[t("li",[s._v("接口不能实例化，需要由其他类实现接口")]),s._v(" "),t("li",[s._v("接口的实现类(如果不是抽象类)，必须实现接口中"),t("strong",[s._v("所有")]),s._v("的「抽象」方法")]),s._v(" "),t("li",[s._v("接口中每一个方法会被隐式指定为"),t("code",[s._v("public abstract")]),s._v("(只能是，其他修饰符会报错)")]),s._v(" "),t("li",[s._v("接口中每一个变量会被隐式指定为"),t("code",[s._v("public static final")]),s._v("(接口中只有"),t("code",[s._v("public")]),s._v("一种权限)")]),s._v(" "),t("li",[s._v("接口允许多继承，一个接口可以继承多个父接口")])]),s._v(" "),t("h3",{attrs:{id:"接口定义的加强"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口定义的加强"}},[s._v("#")]),s._v(" 接口定义的加强")]),s._v(" "),t("p",[t("code",[s._v("JDK1.8")]),s._v("后，增加"),t("code",[s._v("default")]),s._v("方法和"),t("code",[s._v("static")]),s._v("方法定义(接口可以拥有方法体了)")]),s._v(" "),t("p",[t("strong",[s._v("接口问题分析")]),s._v(": 如果一个接口已经被多个类实现，但是又需要对接口进行修改，如扩充一个新方法，且所有子类对扩充方法的实现相同，此时就需要对大量子类进行修改")]),s._v(" "),t("p",[t("strong",[s._v("传统解决方案")]),s._v(": 子类实现接口，同时在接口与子类间，增加一个中间"),t("strong",[s._v("抽象类")]),s._v("，由抽象类「继承」接口")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StudentAdaptor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 中间类，负责一些同一的修改，实现")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" student "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StudentAdaptor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("code",[s._v("JDK1.8")]),s._v("之后考虑到了接口的修改扩充问题，为了简化抽象类的过渡造成的结构影响(结构混乱)，所以引入了普通方法的定义")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("div",{staticClass:"highlight-lines"},[t("br"),t("div",{staticClass:"highlighted"},[s._v(" ")]),t("br"),t("br"),t("br"),t("br")]),t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" sayHi "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hi"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),t("p",[s._v("但是因此也引出了新的问题，如果一个类实现了多个接口，而多个接口含有名称相同的"),t("code",[s._v("default")]),s._v("方法？相当于出现了「多继承」的问题，此时如果子类没有显示重写此方法，则编译器会报错")])]),s._v(" "),t("h2",{attrs:{id:"抽象类与接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#抽象类与接口"}},[s._v("#")]),s._v(" 抽象类与接口")]),s._v(" "),t("h3",{attrs:{id:"向上转型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#向上转型"}},[s._v("#")]),s._v(" 向上转型")]),s._v(" "),t("p",[s._v("一个类可以继承一个抽象类的同时，实现多个接口，且因为抽象类和接口都支持"),t("strong",[s._v("向上转型")]),s._v("，因此子类的父类对象可以相互间进行强制类型转换")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("div",{staticClass:"highlight-lines"},[t("br"),t("br"),t("div",{staticClass:"highlighted"},[s._v(" ")]),t("br")]),t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BUStudent")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BUStudent")]),s._v(" astu "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" astu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Forced cast")]),s._v("\n")])]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("Object类")]),s._v(" "),t("p",[s._v("由此可知，不仅所有引用数据类型(基本数据类型通过自动装箱也可以)可以由"),t("code",[s._v("Object")]),s._v("类接收，任何接口类型同样可以")])]),s._v(" "),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),t("p",[s._v("[1] "),t("a",{attrs:{href:"https://www.runoob.com/java/java-abstraction.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Java菜鸟教程"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("[2] "),t("a",{attrs:{href:"https://edu.aliyun.com/roadmap/java?spm=5176.13345299.1392477.3.63ddf153q7QkVf",target:"_blank",rel:"noopener noreferrer"}},[s._v("阿里云大学 | 李兴华 - Java语言基础"),t("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);