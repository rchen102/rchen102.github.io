(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{454:function(t,_,v){"use strict";v.r(_);var r=v(25),e=Object(r.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"平衡二叉树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树"}},[t._v("#")]),t._v(" 平衡二叉树")]),t._v(" "),v("p",[t._v("二叉搜索树在理想情况下，各个操作的时间复杂度都是 "),v("code",[t._v("O(logn)")]),t._v(" ，但是在动态更新的过程中，二叉树可能会失去平衡，导致各个操作的效率下降，甚至退化成链表。要解决这个问题，则需要设计一种平衡二叉搜索树，具有在动态更新的过程中自我调整维持平衡状态的能力")]),t._v(" "),v("p",[v("strong",[t._v("平衡二叉树（AVL）")]),t._v("：任意节点的左右子树高度相差不能大于 "),v("code",[t._v("1")])]),t._v(" "),v("p",[t._v("主要通过左旋和右旋来维持平衡，"),v("a",{attrs:{href:"https://www.cnblogs.com/kubidemanong/p/9809117.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("具体"),v("OutboundLink")],1)]),t._v(" "),v("div",{attrs:{align:"center"}},[v("p",[v("img",{attrs:{src:"/img/DSA/rotate.gif",alt:"左右旋"}})])]),t._v(" "),v("h2",{attrs:{id:"红黑树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[t._v("#")]),t._v(" 红黑树")]),t._v(" "),v("p",[t._v("红黑树没有严格符合上述定义，因此其实只是一种「近似平衡」二叉树，只保证："),v("strong",[t._v("从根节点到叶子的最长路径，不多于最短路径的两倍")])]),t._v(" "),v("p",[t._v("最大深度为 "),v("code",[t._v("2*log(n+1)")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("对比 AVL 树")]),t._v(" "),v("ul",[v("li",[t._v("AVL 树是严格符合定义的平衡二叉树，因此查找效率极高，但是为了维持这种高度的平衡，每次插入、删除操作\n都需要做出调整，因此对于需要频繁插入删除的情况，代价十分高昂")]),t._v(" "),v("li",[t._v("红黑树只是做到了「近似平衡」，即极端情况下，性能不会退化太严重，因此维护平衡的成本低了很多，插入、删除、查找的各种操作性能比较稳定")])])]),t._v(" "),v("p",[v("strong",[t._v("红黑树的通常定义")])]),t._v(" "),v("ol",[v("li",[t._v("节点是红色或者黑色")]),t._v(" "),v("li",[t._v("根节点是黑色")]),t._v(" "),v("li",[t._v("每个叶子节点都是黑色的空节点")]),t._v(" "),v("li",[t._v("每个红色节点的两个子节点都是黑色")]),t._v(" "),v("li",[t._v("从任意节点到其每个叶子节点的所有路径都包含数目相同的黑色节点")])]),t._v(" "),v("p",[v("strong",[t._v("红黑树的另一种定义")])]),t._v(" "),v("ol",[v("li",[t._v("含有红黑链接的并满足下面条件的二叉搜索树")]),t._v(" "),v("li",[t._v("红链接均为左链接")]),t._v(" "),v("li",[t._v("没有任何一个节点同时和两个红链接相连")]),t._v(" "),v("li",[t._v("该树是完美黑色平衡，即任意 NULL 节点到根节点路径上的黑色节点数量相同")])]),t._v(" "),v("h2",{attrs:{id:"原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),v("p",[t._v("想要理解红黑树的实现原理，可以先理解 2-3 树的原理，从 2-3 树的角度去理解红黑树的操作会更加容易")]),t._v(" "),v("p",[t._v("红节点其实指的是红链接，指向该节点的链接若为红色，则该节点为红节点")]),t._v(" "),v("p",[t._v("红色节点其实就是对应于 2-3 树中的 3-节点，若把红节点与其黑的父节点放平，就变为了一棵 2-3 树")]),t._v(" "),v("p",[t._v("为了简化红黑树，规定不允许存在红色右节点，即红链接只能向左")]),t._v(" "),v("h3",{attrs:{id:"_2-3-树的节点插入"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-树的节点插入"}},[t._v("#")]),t._v(" 2-3 树的节点插入")]),t._v(" "),v("ol",[v("li",[t._v("对于空树，插入一个 2 节点：直接插入")]),t._v(" "),v("li",[t._v("插入节点到一个 2 节点的叶子节点：升级为 3 节点")]),t._v(" "),v("li",[t._v("插入节点到一个 3 节点："),v("br"),t._v("\na. 只有一个 3 节点：创建一个临时 4 节点，再分解为一个 2-3 树（3 个 2 节点）"),v("br"),t._v("\nb. 父节点为 2 节点的 3 节点：和上面一样，不过分解为 2-3 树后与父节点合并，父节点变 3 节点"),v("br"),t._v("\nc. 父节点为 3 节点的 3 节点：对比 b，此时向上合并后，父节点变临时 4 节点，继续向上合并"),v("br"),t._v("\nd. 父节点到根节点全部是 3 节点：不断向上合并，最后树的深度增加一层")])]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://www.cnblogs.com/lishanlei/p/10707791.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("多路查找树---2-3树和2-3-4树的深入理解"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://www.cnblogs.com/tiancai/p/9072813.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("清晰理解红黑树的演变"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://blog.csdn.net/yang_yulei/article/details/26066409",target:"_blank",rel:"noopener noreferrer"}},[t._v("最简单清晰的红黑树讲解"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=e.exports}}]);