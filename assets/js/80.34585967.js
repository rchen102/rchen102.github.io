(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{422:function(t,v,_){"use strict";_.r(v);var r=_(25),a=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"进程和线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[t._v("#")]),t._v(" 进程和线程")]),t._v(" "),_("p",[_("strong",[t._v("进程：系统进行资源分配的基本单位")])]),t._v(" "),_("ul",[_("li",[t._v("每个进程拥有独立内存空间，进程间通信成本高")]),t._v(" "),_("li",[t._v("引入进程目的：多个程序并发执行，提高资源使用率、提高系统效率")]),t._v(" "),_("li",[t._v("缺点：进程在创建，切换和销毁时候开销比较大")])]),t._v(" "),_("p",[_("strong",[t._v("线程：CPU 进行调度的基本单位")])]),t._v(" "),_("ul",[_("li",[t._v("轻量级的进程，同一进程的线程共享：heap；独立：stack，程序计数器，一组寄存器")]),t._v(" "),_("li",[t._v("引入线程目的：同一进程里多线程共享虚拟内存空间和一些重要资源，线程间上下文切换和通信开销小；且同一进程下，有时可以分为互不关联的任务，无需顺序执行，提高操作系统的并发性")])]),t._v(" "),_("h2",{attrs:{id:"并发和并行"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并发和并行"}},[t._v("#")]),t._v(" 并发和并行")]),t._v(" "),_("div",{attrs:{align:"center"}},[_("img",{staticStyle:{zoom:"100%"},attrs:{src:"/img/Java/ConcurrentParallel.jpg"}})]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("并发")]),t._v("：在一个执行单元（CPU）上，交替执行多个任务")]),t._v(" "),_("li",[_("strong",[t._v("并行")]),t._v("：在多个执行单元（CPU）上，同时执行多个任务")])]),t._v(" "),_("h2",{attrs:{id:"三个核心问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三个核心问题"}},[t._v("#")]),t._v(" 三个核心问题")]),t._v(" "),_("p",[t._v("并发编程领域可以抽象为以下 3 个核心问题，如何解决这些问题是掌握并发编程的关键：")]),t._v(" "),_("ol",[_("li",[_("strong",[t._v("分工")]),t._v("：如何将一个任务合理的拆分，提高并发程序的性能")]),t._v(" "),_("li",[_("strong",[t._v("同步")]),t._v("：主要指线程间的协作，即如何做到：当条件满足时，线程被唤醒；条件不满足时，线程等待")]),t._v(" "),_("li",[_("strong",[t._v("互斥")]),t._v("：如何保证线程安全，同一时刻，只允许一个线程访问共享变量")])])])}),[],!1,null,null,null);v.default=a.exports}}]);