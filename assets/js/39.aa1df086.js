(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{433:function(t,r,e){"use strict";e.r(r);var s=e(25),a=Object(s.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[t._v("二叉搜索树在理想情况下，各个操作的时间复杂度都是 "),e("code",[t._v("O(logn)")]),t._v(" ，但是在动态更新的过程中，二叉树可能会失去平衡，导致各个操作的效率下降，甚至退化成链表。要解决这个问题，则需要设计一种平衡二叉搜索树，具有在动态更新的过程中自我调整维持平衡状态的能力")]),t._v(" "),e("p",[e("strong",[t._v("平衡二叉树严格定义")]),t._v("：任意节点的左右子树高度相差不能大于 1")]),t._v(" "),e("p",[t._v("红黑树没有严格符号上述定义，因此其实只是一种「近似平衡」二叉树，只保证："),e("strong",[t._v("从根节点到叶子的最长路径，不多于最短路径的两倍")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("对比 AVL 树")]),t._v(" "),e("ul",[e("li",[t._v("AVL 树是严格符合定义的平衡二叉树，因此查找效率极高，但是为了维持这种高度的平衡，每次插入、删除操作\n都需要做出调整，因此对于需要频繁插入删除的情况，代价十分高昂")]),t._v(" "),e("li",[t._v("红黑树只是做到了「近似平衡」，即极端情况下，性能不会退化太严重，因此维护平衡的成本低了很多，插入、删除、查找的各种操作性能比较稳定")])])]),t._v(" "),e("h2",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),e("p",[t._v("想要理解红黑树的实现原理，可以先理解 2-3 树的原理，从 2-3 树的角度去理解红黑树的操作会更加容易")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.cnblogs.com/lishanlei/p/10707791.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("多路查找树---2-3树和2-3-4树的深入理解"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.cnblogs.com/tiancai/p/9072813.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("清晰理解红黑树的演变"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=a.exports}}]);