(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{403:function(v,t,_){"use strict";_.r(t);var a=_(25),r=Object(a.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"进程和线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[v._v("#")]),v._v(" 进程和线程")]),v._v(" "),_("p",[_("strong",[v._v("进程：系统进行资源分配和调度的基本单位")])]),v._v(" "),_("ul",[_("li",[v._v("每个进程拥有独立内存空间，进程间通信成本高")]),v._v(" "),_("li",[v._v("引入进程目的：多个程序并发执行，提高资源使用率、提高系统效率")]),v._v(" "),_("li",[v._v("缺点：进程在创建，切换和销毁时候开销比较大")])]),v._v(" "),_("p",[_("strong",[v._v("线程：CPU 进行调度的基本单位")])]),v._v(" "),_("ul",[_("li",[v._v("同一进程内的线程共享地址空间和大部分系统资源，轻量级的进程，通信成本低")]),v._v(" "),_("li",[v._v("引入线程目的：在进程的基础上节省系统的时空开销,提高操作系统的并发性，提供更细的并发粒度")])]),v._v(" "),_("p",[_("strong",[v._v("并行和并发")]),v._v("：并行针对进程，是不同实体上的多个事件；并发针对线程，是在同⼀实体上的多个事件")]),v._v(" "),_("h2",{attrs:{id:"java-中的线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-中的线程"}},[v._v("#")]),v._v(" Java 中的线程")]),v._v(" "),_("p",[_("strong",[v._v("Java 程序都运行在 JVM 中，当用 Java 命令启动一个 Java 程序时")]),v._v("：")]),v._v(" "),_("ol",[_("li",[v._v("启动一个 JVM 进程")]),v._v(" "),_("li",[v._v("JVM 找到程序的入口，启动一个主线程运行 main() 方法，同时也会启动一些其他线程，如 GC 线程")])]),v._v(" "),_("p",[_("strong",[v._v("用户线程和守护线程")]),v._v("：线程启动前，可以使用 "),_("code",[v._v("Thread.setDaemon(true)")]),v._v(" 设置为守护线程，默认用户线程")]),v._v(" "),_("ul",[_("li",[v._v("主要区别：是否阻止 JVM 正常退出（异常退出：例如 "),_("code",[v._v("System.exit(int status)")]),v._v(" 结束 JVM 进程）")]),v._v(" "),_("li",[v._v("只要还有用户线程在运行，JVM 不会退出；如果没有用户线程，都是守护线程，JVM 结束")]),v._v(" "),_("li",[_("strong",[v._v("主线程")]),v._v("只是一个普通的用户线程，且 main() 方法开始执行时，线程已经启动，不能再被设为守护线程")])]),v._v(" "),_("hr"),v._v(" "),_("p",[_("strong",[v._v("参考")])]),v._v(" "),_("p",[v._v("[1] "),_("a",{attrs:{href:"https://www.cnblogs.com/mler/p/9453597.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("Java 线程类别，钩子线程"),_("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);