(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{410:function(t,v,a){"use strict";a.r(v);var e=a(25),_=Object(e.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"内存模型背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存模型背景"}},[t._v("#")]),t._v(" 内存模型背景")]),t._v(" "),a("h3",{attrs:{id:"物理机并发问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#物理机并发问题"}},[t._v("#")]),t._v(" 物理机并发问题")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{staticStyle:{zoom:"70%"},attrs:{src:"/img/Java/JMMCPU.png"}})]),t._v(" "),a("p",[a("strong",[t._v("1. 硬件效率问题")])]),t._v(" "),a("p",[t._v("CPU 无法仅仅依靠寄存器完成任务，需要与内存进行交互")]),t._v(" "),a("p",[t._v("然而内存读写速度与 CPU 的运算速度有数量级的差距，因此增加了一层高速缓存，作为作为内存和处理器之间的缓冲：算时，将需要用到的数据复制到缓存中，计算结束后，再从缓存中同步回主内存")]),t._v(" "),a("p",[a("strong",[t._v("2. 缓存一致性问题")])]),t._v(" "),a("p",[t._v("对于多 CPU 系统（或多核 CPU），每个 CPU 内核都拥有自己的高速缓存，因此当多个线程同时涉及同一块内存区域时，可能导致各自的缓存数据不一致")]),t._v(" "),a("p",[t._v("为此，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议进行操作，来维护缓存的一致性，比如 MESI 协议")]),t._v(" "),a("p",[a("strong",[t._v("3. 重排序优化问题")])]),t._v(" "),a("p",[t._v("为了充分利用 CPU 内部运算单元，提高运行速度，编译器和处理器常常会对指令进行重排序：")]),t._v(" "),a("ul",[a("li",[t._v("编译器优化的重排序：编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序")]),t._v(" "),a("li",[t._v("指令级并行的重排序：现代 CPU 采用指令级并行技术，如果不存在数据依赖，可以多条指令重叠执行")]),t._v(" "),a("li",[t._v("内存系统的重排序：由于 CPU 使用缓存和读/写缓冲区，使得 load/store 操作看上去可能是在乱序执行")])]),t._v(" "),a("p",[t._v("单核环境下，重排序是提高 CPU 运算速度的一种优化，可以保证运算结果与顺序执行相同")]),t._v(" "),a("p",[t._v("多核环境下，如果一个线程的计算任务依赖另一个线程计算任务的中间结果，且对相关数据读写没有任何防护措施，则代码的顺序性无法保证执行的顺序性，最终的结果也会不同于逻辑结果")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{staticStyle:{zoom:"100%"},attrs:{src:"/img/Java/Reorder.png"}})]),t._v(" "),a("h2",{attrs:{id:"java-内存模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-内存模型"}},[t._v("#")]),t._v(" Java 内存模型")]),t._v(" "),a("h3",{attrs:{id:"jmm-基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jmm-基本概念"}},[t._v("#")]),t._v(" JMM 基本概念")]),t._v(" "),a("p",[t._v("内存模型就是为了解决上述问题而提出的，是对内存和高速缓存读写访问的过程的抽象，不同系统和平台可能有不同的内存模型")]),t._v(" "),a("p",[t._v("JVM 规范中试图定义一种 Java 内存模型（JMM），来屏蔽掉各种硬件和操作系统的内存访问差异，保证 Java 程序在各个平台下都能达到一致的内存访问效果，不同于 C++，直接使用操作系统平台内存模型，导致同一代码在不同平台运行，可能存在并发问题")]),t._v(" "),a("p",[t._v("Java 内存模型和 JVM 内存模型，都是一种规范，属于不同层次的划分：Java 内存模型描述多线程运行时的内存间交互，为了程序可以正确并发执行；JVM 内存模型描述 JVM 的内存划分，为了便于管理和理解 Java 程序内存")]),t._v(" "),a("p",[t._v("更具体的说，JMM 主要是为了定义了程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节")]),t._v(" "),a("p",[t._v("此处的变量与 Java 编程中所说的变量有所区别，包括了实例字段、静态字段和构成数值对象的元素，但不包括局部变量与方法参数，因为后者是线程私有的")]),t._v(" "),a("h3",{attrs:{id:"jmm-具体组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jmm-具体组成"}},[t._v("#")]),t._v(" JMM 具体组成")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{staticStyle:{zoom:"70%"},attrs:{src:"/img/Java/JMM.png"}})]),t._v(" "),a("p",[a("strong",[t._v("1. 主内存")])]),t._v(" "),a("p",[t._v("JMM 规定所有的变量都存储在共同的主内存（Main Memory）中")]),t._v(" "),a("p",[t._v("此处主内存可以类比硬件的主内存，但是实际上仅仅是 JVM 内存的一部分")]),t._v(" "),a("p",[a("strong",[t._v("2. 工作内存")])]),t._v(" "),a("p",[t._v("每个线程拥有自己的工作内存（Working Memory），工作内存中保存了被该线程使用到的变量的主内存副本拷贝")]),t._v(" "),a("p",[t._v("线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量，不同的线程之间也无法直接访问对方工作内存中的变量")]),t._v(" "),a("p",[t._v("工作内存也属于抽象概念，涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化")]),t._v(" "),a("h3",{attrs:{id:"jmm-并发问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jmm-并发问题"}},[t._v("#")]),t._v(" JMM 并发问题")]),t._v(" "),a("p",[a("strong",[t._v("1. 数据一致性问题")])]),t._v(" "),a("p",[t._v("不同线程都拥有自己的工作内存，当多个线程的运算任务涉及同一共享变量时，各自的工作内存内共享变量的副本可能不一致，同步会主内存时，会出现问题")]),t._v(" "),a("p",[t._v("JMM 主要通过一系列的数据同步协议、规则来保证数据的一致性")]),t._v(" "),a("p",[a("strong",[t._v("2. 重排序优化问题")])]),t._v(" "),a("p",[t._v("Java 中重排序，主要分为两类分别对应编译时和运行时，即编译期重排序和运行期重排序，重排序满足以下两个条件：")]),t._v(" "),a("ul",[a("li",[t._v("遵守 as - if - serial 语义，即单线程环境下，重排序的运行结果与顺序执行是相同的")]),t._v(" "),a("li",[t._v("不对存在数据依赖关系的指令进行重排序")])]),t._v(" "),a("h2",{attrs:{id:"java-内存间交互"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-内存间交互"}},[t._v("#")]),t._v(" Java 内存间交互")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{staticStyle:{zoom:"80%"},attrs:{src:"/img/Java/JMMAtom.png"}})]),t._v(" "),a("p",[t._v("关于主内存与工作内存交互，JMM 定义了 8 种基本操作，虚拟机实现时必须保证每种操作都是原子的，即不可再分的（对于 double/long 变量，load/sotre，read/write 操作在某些平台上允许有例外）：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("操作")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("作用")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("lock（锁定）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("将主内存变量加锁，标识为线程独占状态")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("unlock（解锁）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("将主内存变量解锁，解锁后可被其他线程锁定")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("read（读取）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从主内存读取变量的值，传输到工作内存中，准备 load")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("load（载入）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("将变量的值写入工作内存")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("use（使用）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从工作内存读取数据来进行计算")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("assign（赋值）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("将运算后的值重写存储到工作内存中")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("store（存储）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从工作内存读取变量的值，传输到主内存，准备 write")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("write（写入）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("将变量的值写入主内存")])])])]),t._v(" "),a("h2",{attrs:{id:"java-内存模型运行规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-内存模型运行规则"}},[t._v("#")]),t._v(" Java 内存模型运行规则")]),t._v(" "),a("h3",{attrs:{id:"三大特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三大特性"}},[t._v("#")]),t._v(" 三大特性")]),t._v(" "),a("p",[t._v("总的来说，JMM 一系列运行规则主要就是围绕原子性、可见性、有序性特征建立的")]),t._v(" "),a("p",[a("strong",[t._v("1. 原子性")]),t._v("（Atomicity）")]),t._v(" "),a("p",[t._v("一个操作或者多个操作，要么全部执行完毕且过程中不会被打断，要么全都不执行")]),t._v(" "),a("p",[t._v("即使在多个线程一起执行的时候，一个操作一旦开始，就不会被其他线程所干扰")]),t._v(" "),a("p",[a("strong",[t._v("2. 可见性")]),t._v("（Visibility）")]),t._v(" "),a("p",[t._v("多线程环境下，一个线程修改了共享变量的值，其他线程能够立即看到修改后的值")]),t._v(" "),a("p",[t._v("JMM 通过控制主内存与每个线程本地内存之间的交互，来为各个线程提供共享变量的可见性")]),t._v(" "),a("p",[a("strong",[t._v("3. 有序性")]),t._v("（Ordering）")]),t._v(" "),a("p",[t._v("如果在本线程内观察，所有操作都是有序的，如果在一个线程中观察另一个线程，所有操作都是无序的")]),t._v(" "),a("ul",[a("li",[t._v("线程内：指令表现为按照串行方式（as - if - serial）执行")]),t._v(" "),a("li",[t._v("线程间：观察其他线程并发执行非同步的代码时，由于指令重排序优化，任何代码都可能交叉执行")])]),t._v(" "),a("p",[t._v("Java 语言提供了 volatile 和 synchronized 两个关键字来保证线程之间操作的有序性")]),t._v(" "),a("h3",{attrs:{id:"happens-before"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#happens-before"}},[t._v("#")]),t._v(" happens - before")]),t._v(" "),a("p",[t._v("我感觉就是在use这一步以后，将变量丢到了操作栈以后，你通知过来我的工作内存失效，也不影响我执行引擎继续执行，是不会重读的")]),t._v(" "),a("p",[t._v("重排序")]),t._v(" "),a("p",[t._v("顺序一致性")]),t._v(" "),a("p",[t._v("happens-before")]),t._v(" "),a("p",[t._v("as-if-serial")]),t._v(" "),a("p",[t._v("https://mubu.com/doc/2Q_5ufWdwPk")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("参考：")]),t._v(" "),a("p",[t._v("[1] "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/SvxHhkGu84rFXaWbeiAXQg",target:"_blank",rel:"noopener noreferrer"}},[t._v("陈彩华 51CTO技术栈 | Java内存模型原理，你真的理解吗？"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("[2] "),a("a",{attrs:{href:"http://ddrv.cn/a/35646",target:"_blank",rel:"noopener noreferrer"}},[t._v("算法网 | JVM（十一）Java 内存模型"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("[3] "),a("a",{attrs:{href:"https://www.choupangxia.com/2019/11/04/interview-jvm-gc-05/",target:"_blank",rel:"noopener noreferrer"}},[t._v("程序新视界 | JAVA内存模型(JMM)详解"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("[4] "),a("a",{attrs:{href:"https://www.cnblogs.com/secbro/p/11804404.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("程序新视界 | Java内存模型相关原则详解"),a("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=_.exports}}]);